import cv2
import torch
import pygame
import threading
import time
import smtplib
import sqlite3
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from datetime import datetime

# Load the YOLOv5 model
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')
print("‚úÖ YOLOv5 model loaded successfully.")

# Global flags
alarm_triggered = False
email_sent = False  # Track if email has been sent for the current alarm

# Database setup
conn = sqlite3.connect('detections.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS detections (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp TEXT,
    label TEXT,
    confidence REAL
)''')
conn.commit()
print("‚úÖ SQLite database initialized.")

# Email alert function (with image attachment)
def send_email_alert(label, confidence, frame):
    now = datetime.now()
    try:
        sender = 'pavithrasenthil005@gmail.com'
        password = 'xygnjxgdwnkvdpsl'
        recipient = 'ashikadhottaiyan@gmail.com'
        subject = ' Weapon Detected Alert'

        # Save frame to image
        image_filename = 'detection.jpg'
        cv2.imwrite(image_filename, frame)

        # Email content
        html_content = f"""
        <html>
            <body style="font-family: Arial, sans-serif; color: #333;">
                <h2> Weapon Detection Alert</h2>
                <p><strong>Object Detected:</strong> {label}</p>
                <p><strong>Confidence Score:</strong> {confidence:.2f}</p>
                <p><strong>Time of Detection:</strong> {now.strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p>See the attached image for the detection snapshot.</p>
                <hr>
                <p style="font-size: small; color: gray;">
                    This is an automated alert from your real-time security system.<br>
                    Please do not reply to this message.
                </p>
            </body>
        </html>
        """

        msg = MIMEMultipart("related")
        msg['Subject'] = subject
        msg['From'] = sender
        msg['To'] = recipient

        msg.attach(MIMEText(html_content, "html"))

        # Attach image
        with open(image_filename, 'rb') as img_file:
            img = MIMEImage(img_file.read(), name='detection.jpg')
            msg.attach(img)

        print("üìß Connecting to SMTP server...")
        server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        server.login(sender, password)
        server.send_message(msg)
        server.quit()
        print("‚úÖ Email with image attachment sent successfully.")

    except Exception as e:
        print("‚ùå Error sending email:", e)

# Alarm sound function
def play_alarm():
    global alarm_triggered, email_sent
    try:
        pygame.mixer.init()
        pygame.mixer.music.load('alarm.mp3')  # Ensure this file exists
        pygame.mixer.music.play(-1)
        print("üîä Alarm started.")
        time.sleep(60)
        pygame.mixer.music.stop()
        print("üîá Alarm stopped after 60 seconds.")
    except Exception as e:
        print("‚ùå Alarm error:", e)
    finally:
        alarm_triggered = False
        email_sent = False  # Allow email sending for next detection

# Webcam setup
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("‚ùå Error: Cannot access the webcam.")
    exit()
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
print("üì∑ Webcam started successfully.")

while True:
    ret, frame = cap.read()
    if not ret:
        print("‚ùå Failed to grab frame")
        break

    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # YOLO detection
    with torch.no_grad():
        results = model(rgb_frame)

    detections = results.pandas().xyxy[0]
    weapon_detected = False

    for _, row in detections.iterrows():
        label = row['name']
        confidence = row['confidence']
        print(f"üîç Detected: {label} ({confidence:.2f})")

        if label in ['knife', 'gun'] and confidence > 0.3:
            weapon_detected = True
            print(f" Weapon detected: {label} with confidence {confidence:.2f}")

            x1, y1, x2, y2 = int(row['xmin']), int(row['ymin']), int(row['xmax']), int(row['ymax'])
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 2)
            cv2.putText(frame, f"{label} ({confidence:.2f})", (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute("INSERT INTO detections (timestamp, label, confidence) VALUES (?, ?, ?)",
                           (timestamp, label, float(confidence)))
            conn.commit()
            print("üóÇÔ∏è Detection logged to database.")

            if not email_sent:
                send_email_alert(label, confidence, frame.copy())
                email_sent = True

    if weapon_detected and not alarm_triggered:
        alarm_triggered = True
        threading.Thread(target=play_alarm, daemon=True).start()

    if alarm_triggered:
        cv2.putText(frame, "!!! WEAPON DETECTED - ALARM TRIGGERED !!!", (30, 50),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 3)

    cv2.imshow('Weapon Detection', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
conn.close()
print("üëã Program exited cleanly.")import cv2
import torch
import pygame
import threading
import time
import smtplib
import sqlite3
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from datetime import datetime

# Load the YOLOv5 model
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')
print("‚úÖ YOLOv5 model loaded successfully.")

# Global flags
alarm_triggered = False
email_sent = False  # Track if email has been sent for the current alarm

# Database setup
conn = sqlite3.connect('detections.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS detections (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp TEXT,
    label TEXT,
    confidence REAL
)''')
conn.commit()
print("‚úÖ SQLite database initialized.")

# Email alert function (with image attachment)
def send_email_alert(label, confidence, frame):
    now = datetime.now()
    try:
        sender = 'pavithrasenthil005@gmail.com'
        password = 'xygnjxgdwnkvdpsl'
        recipient = 'ashikadhottaiyan@gmail.com'
        subject = ' Weapon Detected Alert'

        # Save frame to image
        image_filename = 'detection.jpg'
        cv2.imwrite(image_filename, frame)

        # Email content
        html_content = f"""
        <html>
            <body style="font-family: Arial, sans-serif; color: #333;">
                <h2> Weapon Detection Alert</h2>
                <p><strong>Object Detected:</strong> {label}</p>
                <p><strong>Confidence Score:</strong> {confidence:.2f}</p>
                <p><strong>Time of Detection:</strong> {now.strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p>See the attached image for the detection snapshot.</p>
                <hr>
                <p style="font-size: small; color: gray;">
                    This is an automated alert from your real-time security system.<br>
                    Please do not reply to this message.
                </p>
            </body>
        </html>
        """

        msg = MIMEMultipart("related")
        msg['Subject'] = subject
        msg['From'] = sender
        msg['To'] = recipient

        msg.attach(MIMEText(html_content, "html"))

        # Attach image
        with open(image_filename, 'rb') as img_file:
            img = MIMEImage(img_file.read(), name='detection.jpg')
            msg.attach(img)

        print("üìß Connecting to SMTP server...")
        server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        server.login(sender, password)
        server.send_message(msg)
        server.quit()
        print("‚úÖ Email with image attachment sent successfully.")

    except Exception as e:
        print("‚ùå Error sending email:", e)

# Alarm sound function
def play_alarm():
    global alarm_triggered, email_sent
    try:
        pygame.mixer.init()
        pygame.mixer.music.load('alarm.mp3')  # Ensure this file exists
        pygame.mixer.music.play(-1)
        print("üîä Alarm started.")
        time.sleep(60)
        pygame.mixer.music.stop()
        print("üîá Alarm stopped after 60 seconds.")
    except Exception as e:
        print("‚ùå Alarm error:", e)
    finally:
        alarm_triggered = False
        email_sent = False  # Allow email sending for next detection

# Webcam setup
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("‚ùå Error: Cannot access the webcam.")
    exit()
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
print("üì∑ Webcam started successfully.")

while True:
    ret, frame = cap.read()
    if not ret:
        print("‚ùå Failed to grab frame")
        break

    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # YOLO detection
    with torch.no_grad():
        results = model(rgb_frame)

    detections = results.pandas().xyxy[0]
    weapon_detected = False

    for _, row in detections.iterrows():
        label = row['name']
        confidence = row['confidence']
        print(f"üîç Detected: {label} ({confidence:.2f})")

        if label in ['knife', 'gun'] and confidence > 0.3:
            weapon_detected = True
            print(f" Weapon detected: {label} with confidence {confidence:.2f}")

            x1, y1, x2, y2 = int(row['xmin']), int(row['ymin']), int(row['xmax']), int(row['ymax'])
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 2)
            cv2.putText(frame, f"{label} ({confidence:.2f})", (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute("INSERT INTO detections (timestamp, label, confidence) VALUES (?, ?, ?)",
                           (timestamp, label, float(confidence)))
            conn.commit()
            print("üóÇÔ∏è Detection logged to database.")

            if not email_sent:
                send_email_alert(label, confidence, frame.copy())
                email_sent = True

    if weapon_detected and not alarm_triggered:
        alarm_triggered = True
        threading.Thread(target=play_alarm, daemon=True).start()

    if alarm_triggered:
        cv2.putText(frame, "!!! WEAPON DETECTED - ALARM TRIGGERED !!!", (30, 50),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 3)

    cv2.imshow('Weapon Detection', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
conn.close()
print("üëã Program exited cleanly.")

